"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[91070],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,g=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const i={title:"TubeMQ binary protocol",sidebar_position:4},o=void 0,s={unversionedId:"development/binary_protocol/tubemq_binary",id:"development/binary_protocol/tubemq_binary",title:"TubeMQ binary protocol",description:"Overview",source:"@site/docs/development/binary_protocol/tubemq_binary.md",sourceDirName:"development/binary_protocol",slug:"/development/binary_protocol/tubemq_binary",permalink:"/docs/next/development/binary_protocol/tubemq_binary",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/docs/development/binary_protocol/tubemq_binary.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"TubeMQ binary protocol",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"DataProxy binary protocol and usage",permalink:"/docs/next/development/binary_protocol/dataproxy_binary"},next:{title:"Audit data format definition and usage",permalink:"/docs/next/development/binary_protocol/audit_msg"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"TubeMQ message format",id:"tubemq-message-format",level:2},{value:"PB format encoding",id:"pb-format-encoding",level:3},{value:"Client request response interaction",id:"client-request-response-interaction",level:2},{value:"Producer production interaction diagram",id:"producer-production-interaction-diagram",level:3},{value:"Consumer consumption interaction diagram",id:"consumer-consumption-interaction-diagram",level:3},{value:"The RPC interaction process between the client and the server",id:"the-rpc-interaction-process-between-the-client-and-the-server",level:3},{value:"Producer registers with the Master",id:"producer-registers-with-the-master",level:4},{value:"Producer to Master Heartbeat",id:"producer-to-master-heartbeat",level:4},{value:"Producer to Master Close and Exit",id:"producer-to-master-close-and-exit",level:4},{value:"Producer sends messages to Broker",id:"producer-sends-messages-to-broker",level:4},{value:"Partition Loadbalance",id:"partition-loadbalance",level:4}],c={toc:p},d="wrapper";function u(e){let{components:t,...i}=e;return(0,a.yg)(d,(0,r.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"The various nodes (Client, Master, Broker) of the InLong TubeMQ module interact with each other in the form of TCP long connections, and use a custom binary encoding protocol to construct interactive request and response messages. This article mainly introduces the definition of the binary protocol and gives an example of how to complete the entire process of TubeMQ production and consumption interaction through this protocol."),(0,a.yg)("h2",{id:"tubemq-message-format"},"TubeMQ message format"),(0,a.yg)("p",null,"The following figure is a schematic diagram of the TubeMQ message format definition:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"TubeMQ message frame",src:n(92877).A,width:"1081",height:"699"})),(0,a.yg)("p",null,"As shown from the figure above, each interactive message consists of three fixed parts:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"MsgToken: this field is used to identify the legitimacy of the TubeMQ message. Each TubeMQ message will carry the specified ",(0,a.yg)("inlineCode",{parentName:"p"},"RPC_PROTOCOL_BEGIN_TOKEN")," parameter value. When the client receives a message that does not start with this field, it means that the message is not a legitimate message sent by TubeMQ. The connection can be closed according to the policy, prompting an error exit or reconnection;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"SerialNo: the message sequence number is generated by the requester and returned by the recipient of the request in the response message as is, so that the recipient of the response can associate the request corresponding to the response message lock;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Message content part: this part is encoded by Protobuf and consists of several parts:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"ListSize: 4 bytes, indicating the total number of data blocks after the data encoded by Protobuf is cut into a certain length. This field is not 0 under the current protocol definition;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"[<Length><Data>]"),": data block, composed of 2 fields, indicating the length of the data block sent and the data content, among which:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Length: identifies the length of the data block")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Data: identifies the binary data content of the data block"))))))),(0,a.yg)("p",null,"Why is the Protobuf (hereinafter referred to as PB) encoded data content defined in the form of ",(0,a.yg)("inlineCode",{parentName:"p"},"ListSize [<Length><Data>]"),"?"),(0,a.yg)("p",null,"The main reason is that in the initial implementation of TubeMQ, the serialized PB data is stored in ByteBuffer objects. The maximum block length of a single ByteBuffer in Java is 8196 bytes. PB message content exceeding the length of a single block is stored in multiple ByteBuffers; and when the data is serialized to the TCP message, the total length is not counted, and the ByteBuffer list serialized in PB is directly written into the message.\n",(0,a.yg)("strong",{parentName:"p"},"When implementing in multiple languages, this needs special attention:")," the PB data content needs to be serialized into a block array (there is corresponding support in the PB codec)."),(0,a.yg)("p",null,"The PB codec file of the message content is stored in the ",(0,a.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.tubemq.corerpc")," module. For detailed format definitions, refer to the relevant files."),(0,a.yg)("h3",{id:"pb-format-encoding"},"PB format encoding"),(0,a.yg)("p",null,"The PB protocol is divided into three parts:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"RPC framework definition: ",(0,a.yg)("inlineCode",{parentName:"p"},"RPC.proto"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Master-related message encoding: ",(0,a.yg)("inlineCode",{parentName:"p"},"MasterService.proto"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Broker-related message encoding: ",(0,a.yg)("inlineCode",{parentName:"p"},"BrokerService.proto")))),(0,a.yg)("p",null,"These protocol definition files are directly compiled through PB to obtain the corresponding implementation class. Taking RPC.proto as an example, RPC.proto defines 6 structures, which are divided into 2 types:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Request message")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Response message, including normal response return and response return in case of exception"))),(0,a.yg)("p",null,"The request message encoding and response message decoding can be implemented by referring to the ",(0,a.yg)("inlineCode",{parentName:"p"},"NettyClient.java")," class. There is some room for improvement in the definition of this part, see ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/TUBEMQ-109"},"TUBEMQ-109")," for details. However, due to compatibility considerations, it will be gradually replaced. According to the current proto version, interaction is not a problem at least before version 1.0.0, but the new protocol will be considered for 1.0.0. The protocol implementation module requires each SDK to reserve room for improvement."),(0,a.yg)("p",null,"Taking the request message filling as an example, the RpcConnHeader and other related structures are as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message RpcConnHeader {\n    required int32 flag = 1;\n    optional int64 traceId = 2;\n    optional int64 spanId = 3;\n    optional int64 parentId = 4;\n}\n\nmessage RequestHeader {\n    optional int32 serviceType = 1;\n    optional int32 protocolVer = 2;\n}\n\nmessage RequestBody {\n    required int32 method = 1;\n    optional int64 timeout = 2;\n    optional bytes request = 3;\n}\n")),(0,a.yg)("p",null,"Among them:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"RpcConnHeader"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"flag")," marks whether the message is requested, and the following three fields mark the relevant content of message tracking, which is not used at present;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"RequestHeader")," contains information about service type and protocol version;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"RequestBody")," contains request method, timeout, and request content, among which ",(0,a.yg)("inlineCode",{parentName:"p"},"timeout")," is the maximum allowed waiting time from when a request is received by the server to when it is actually processed. If it exceeds, it will be discarded. The current default is 10 seconds."))),(0,a.yg)("p",null,"The specific implementation of request filling is shown in the following part:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"RequestWrapper requestWrapper =\n                new RequestWrapper(PbEnDecoder.getServiceIdByServiceName(targetInterface),\n                        RpcProtocol.RPC_PROTOCOL_VERSION,\n                        RpcConstants.RPC_FLAG_MSG_TYPE_REQUEST,\n                        requestTimeout); // request timeout\n")),(0,a.yg)("p",null,"At this point, the introduction to the protocol format definition of TubeMQ is complete. Next, we will complete data production and consumption with messages composed of these protocol formats."),(0,a.yg)("h2",{id:"client-request-response-interaction"},"Client request response interaction"),(0,a.yg)("h3",{id:"producer-production-interaction-diagram"},"Producer production interaction diagram"),(0,a.yg)("p",null,"The Producer uses a total of 4 pairs of instructions: registering with the Master node, maintaining heartbeats, and exiting registration operations; interacting with the Broker node to report messages:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Producer RPC interaction",src:n(3558).A,width:"975",height:"792"})),(0,a.yg)("p",null,"From here we can see that the Producer obtains metadata information such as the partition list corresponding to the specified Topic from the Master. After obtaining this information, it selects the partition according to the client's rules and sends the message to the corresponding Broker."),(0,a.yg)("p",null,"Producer needs to pay attention to ",(0,a.yg)("strong",{parentName:"p"},"multi-language implementation:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Master has active and standby nodes, and only the active node can provide services. When the Producer connects to the standby node, it will receive a ",(0,a.yg)("inlineCode",{parentName:"p"},"StandbyException")," exception response. At this time, the client needs to select other Master nodes for registration, and finally select the active Master node for registration;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When the Master connection fails during the production process, such as timeout, passive disconnection of the link, etc., the Producer must initiate a re-registration request to the Master;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"After receiving the metadata information of the Topic from the Master, the Producer must pre-connect to the Broker in advance to avoid a sudden increase in connection requests during data production that affects the message reporting performance;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The connection between the Producer and the Broker must be detected for anomalies: Broker failure nodes must be detected in long-term running scenarios, and links that have not sent messages for a long time must be recycled to improve the stability of the data reporting service."))),(0,a.yg)("h3",{id:"consumer-consumption-interaction-diagram"},"Consumer consumption interaction diagram"),(0,a.yg)("p",null,"Consumer uses a total of 8 pairs of instructions: registering with the Master, heartbeat, and deregistering; registering with the Broker, deregistering, heartbeat, pulling messages, and confirming messages; the registration and deregistration with the Broker use the same command name with different status codes to identify and distinguish different operations:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Consumer RPC interaction",src:n(184).A,width:"857",height:"797"})),(0,a.yg)("p",null,"From the example in the figure above, we can see that:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When the Consumer registers with the main Master node, the Master does not return metadata information to the Consumer, but returns it in the subsequent heartbeat link. The reason is that the Consumer in the example uses the server-side load balancing mode, and needs to wait for the server to distribute the consumption partition information before obtaining the corresponding consumption partition;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"There are registration and un-registration operations from Consumer to Broker. The reason is that the partition is exclusive consumption during consumption, that is, the same partition can only be consumed by one consumer in the same group at the same time. The client obtains the consumption rights of the partition through the registration operation;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Consumer message pulling and consumption confirmation need to appear in pairs. Through the secondary confirmation of data consumption, the problem of repeated consumption can be minimized as much as possible, and the problem of data being missed in abnormal situations can be solved."))),(0,a.yg)("h3",{id:"the-rpc-interaction-process-between-the-client-and-the-server"},"The RPC interaction process between the client and the server"),(0,a.yg)("p",null,"As shown below:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"TubeMQ RPC Implementation",src:n(91859).A,width:"903",height:"715"})),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When the client interacts with the TubeMQ server, it must maintain local storage of the sent request message until the RPC times out or a response message is received;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The client associates the SerialNo value carried in the response message with the previously cached sent request record;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"After receiving the Broker and Topic metadata information from the Master, the client must save it locally and update it with the latest metadata, and report the cached metadata to the Master regularly;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The client must maintain the heartbeat of the Master or Broker. If the Master reports a registration timeout error, it must re-register;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The client must establish a connection based on the Broker, and the business is allowed to choose to establish a connection by object or by process between different objects in the same process."))),(0,a.yg)("h4",{id:"producer-registers-with-the-master"},"Producer registers with the Master"),(0,a.yg)("hr",null),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message RegisterRequestP2M {\n    required string clientId = 1;\n    repeated string topicList = 2;\n    required int64 brokerCheckSum = 3;\n    required string hostName = 4;\n    optional MasterCertificateInfo authInfo = 5;\n    optional string jdkVersion = 6;\n    optional ApprovedClientConfig appdConfig = 7;\n}\n\nmessage RegisterResponseM2P {\n    required bool success = 1;\n    required int32 errCode = 2;\n    required string errMsg = 3;\n    required int64 brokerCheckSum = 4;\n    repeated string brokerInfos = 5;\n    optional MasterAuthorizedInfo authorizedInfo = 6;\n    optional ApprovedClientConfig appdConfig = 7;\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"clientId\uff1aIdentifies the Producer object. The ID value is constructed when the Producer is started and is valid during the Producer life cycle. The current construction rules of the Java version of the SDK are:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'  ClientId = consumerGroup + "_"\n          + AddressUtils.getLocalAddress() + "_" // local ip (IPV4)\n          + pid + "_" // processId\n          + timestamp + "_" // timestamp\n          + counter + "_" // increament counter\n          + consumerType + "_" // type of consumer\uff0cincluding Pull and Push \n          + clientVersion; // version for client\n')),(0,a.yg)("p",{parentName:"li"},"It is recommended that other languages add the above mark to facilitate troubleshooting;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"topicList: Identifies the topic list published by the user. The Producer will provide the initial topic list of the data to be published during initialization. During operation, the business is also allowed to delay adding new topics and reducing published topics through the Publish function;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"brokerCheckSum: The check value of the Broker metadata information saved locally by the client. The Producer does not have this data locally during initial startup, so the value is -1; the SDK needs to carry the last brokerCheckSum value in each request, and the Master determines whether the client's metadata needs to be updated by comparing this value;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"hostname: The IPV4 address value of the machine where the Producer is located;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"success: Whether the operation is successful, success is true, and failure is false;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"errCode: Error code, combined with errMsg information to determine the specific cause of the error;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"errMsg: Error message, if the request response fails, the SDK needs to print out the specific error message")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},'authInfo: authentication and authorization information. If the user configuration has filled in the "Start authentication process", fill it in; if authentication is required, report it according to the signature of the username and password. If it is running, such as during heartbeat, if the Master forces authentication, report it according to the signature of the username and password. If not, authenticate it according to the authorization token provided by the Master during the previous interaction; the authorization token is also used to carry the message production to the Broker during production.')),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"brokerInfos: Broker metadata information. This field mainly contains the Broker information list of the entire cluster fed back by the Master to the Producer; its format is as follows:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},"public BrokerInfo(String strBrokerInfo, int brokerPort) {\n        String[] strBrokers =\n                strBrokerInfo.split(TokenConstants.ATTR_SEP);\n        this.brokerId = Integer.parseInt(strBrokers[0]);\n        this.host = strBrokers[1];\n        this.port = brokerPort;\n        if (!TStringUtils.isBlank(strBrokers[2])) {\n            this.port = Integer.parseInt(strBrokers[2]);\n        }\n        this.buildStrInfo();\n    }\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"authorizedInfo\uff1aMaster provides authorization information in the following format:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message MasterAuthorizedInfo {\n    required int64 visitAuthorizedToken = 1;\n    optional string authAuthorizedToken = 2;\n}\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"visitAuthorizedToken: Access authorization token, to prevent the client from bypassing the Master to access the Broker node. The SDK needs to save this information locally and carry this information when accessing the Broker in the future. If this field changes in the subsequent heartbeat, the locally cached data of this field needs to be updated;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"authAuthorizedToken: Authorization token that has passed authentication. If there is data in this field, the SDK needs to save it and carry this field information when accessing the Master and Broker in the future. If this field changes in the subsequent heartbeat, the locally cached data of this field needs to be updated."))),(0,a.yg)("h4",{id:"producer-to-master-heartbeat"},"Producer to Master Heartbeat"),(0,a.yg)("hr",null),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message HeartRequestP2M {\n    required string clientId = 1;\n    required int64 brokerCheckSum = 2;\n    required string hostName = 3;\n    repeated string topicList = 4;\n    optional MasterCertificateInfo authInfo = 5;\n    optional ApprovedClientConfig appdConfig = 6;\n}\n\nmessage HeartResponseM2P {\n    required bool success = 1;\n    required int32 errCode = 2;\n    required string errMsg = 3;\n    required int64 brokerCheckSum = 4;\n    /* brokerId:host:port-topic:partitionNum */\n    repeated string topicInfos = 5;\n    repeated string brokerInfos = 6;\n    optional bool requireAuth = 7;\n    optional MasterAuthorizedInfo authorizedInfo = 8;\n    optional ApprovedClientConfig appdConfig = 9;\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"topicInfos: Topic metadata information published by the SDK, including partition information and the Broker node where it is located. The specific decoding method is as follows:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},"public static Tuple2<Map<String, Integer>, List<TopicInfo>> convertTopicInfo(\n            Map<Integer, BrokerInfo> brokerInfoMap, List<String> strTopicInfos) {\n        List<TopicInfo> topicList = new ArrayList<>();\n        Map<String, Integer> topicMaxSizeInBMap = new ConcurrentHashMap<>();\n        if (strTopicInfos == null || strTopicInfos.isEmpty()) {\n            return new Tuple2<>(topicMaxSizeInBMap, topicList);\n        }\n        String[] strInfo;\n        String[] strTopicInfoSet;\n        String[] strTopicInfo;\n        BrokerInfo brokerInfo;\n        for (String info : strTopicInfos) {\n            if (info == null || info.isEmpty()) {\n                continue;\n            }\n            info = info.trim();\n            strInfo = info.split(TokenConstants.SEGMENT_SEP, -1);\n            strTopicInfoSet = strInfo[1].split(TokenConstants.ARRAY_SEP);\n            for (String s : strTopicInfoSet) {\n                strTopicInfo = s.split(TokenConstants.ATTR_SEP);\n                brokerInfo = brokerInfoMap.get(Integer.parseInt(strTopicInfo[0]));\n                if (brokerInfo != null) {\n                    topicList.add(new TopicInfo(brokerInfo,\n                            strInfo[0], Integer.parseInt(strTopicInfo[1]),\n                            Integer.parseInt(strTopicInfo[2]), true, true));\n                }\n            }\n            if (strInfo.length == 2 || TStringUtils.isEmpty(strInfo[2])) {\n                continue;\n            }\n            try {\n                topicMaxSizeInBMap.put(strInfo[0], Integer.parseInt(strInfo[2]));\n            } catch (Throwable e) {\n                //\n            }\n        }\n        return new Tuple2<>(topicMaxSizeInBMap, topicList);\n    }\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"requireAuth: indicates that the previous authorized access code (authAuthorizedToken) of the Master has expired, requiring the SDK to carry the signature information of the username and password for authentication in the next request;"))),(0,a.yg)("h4",{id:"producer-to-master-close-and-exit"},"Producer to Master Close and Exit"),(0,a.yg)("hr",null),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message CloseRequestP2M{\n    required string clientId = 1;\n    optional MasterCertificateInfo authInfo = 2;\n}\n\nmessage CloseResponseM2P{\n    required bool success = 1;\n    required int32 errCode = 2;\n    required string errMsg = 3;\n}\n")),(0,a.yg)("p",null,"Noted that if authentication is turned on, authentication will be done when it is turned off to avoid external interference."),(0,a.yg)("h4",{id:"producer-sends-messages-to-broker"},"Producer sends messages to Broker"),(0,a.yg)("hr",null),(0,a.yg)("p",null,"The content of this section is mainly related to the definition of Message:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message SendMessageRequestP2B {\n    required string clientId = 1;\n    required string topicName = 2;\n    required int32 partitionId = 3;\n    required bytes data = 4;\n    required int32 flag = 5;\n    required int32 checkSum = 6;\n    required int32 sentAddr = 7;\n    optional string msgType = 8;\n    optional string msgTime = 9;\n    optional AuthorizedInfo authInfo = 10;\n}\n\nmessage SendMessageResponseB2P {\n    required bool success = 1;\n    required int32 errCode = 2;\n    required string errMsg = 3;\n    optional bool requireAuth = 4;\n    optional int64 messageId = 5;\n    optional int64 appendTime = 6;\n    optional int64 appendOffset = 7;\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"data: Binary byte stream information of Message, implemented as follows:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-Java"},"private byte[] encodePayload(final Message message) {\n        final byte[] payload = message.getData();\n        final String attribute = message.getAttribute();\n        if (TStringUtils.isBlank(attribute)) {\n            return payload;\n        }\n        byte[] attrData = StringUtils.getBytesUtf8(attribute);\n        final ByteBuffer buffer =\n                ByteBuffer.allocate(4 + attrData.length + payload.length);\n        buffer.putInt(attrData.length);\n        buffer.put(attrData);\n        buffer.put(payload);\n        return buffer.array();\n    }\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"sentAddr: IPv4 of the local machine where the SDK is located. Here, the IP address is converted into a 32-bit digital ID;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"msgType: The stream value to which the message belongs, used for filtering consumption;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"msgTime The time when the SDK sends a message. Its value comes from the value filled in by putSystemHeader when constructing the Message;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"requireAuth: Whether authentication identification is required for data production to the Broker. Considering performance issues, it is not effective at present. The authAuthorizedToken value filled in the sent message is based on the value provided by the Master side and changes with the Master side."))),(0,a.yg)("h4",{id:"partition-loadbalance"},"Partition Loadbalance"),(0,a.yg)("hr",null),(0,a.yg)("p",null,"The InLong TubeMQ module currently supports two balancing modes: server-side load balancing and client-side balancing. The business can choose different balancing methods according to needs."),(0,a.yg)("p",null,"The server balancing process is managed and maintained by the server, and the requirements for the Consumer consumption side are relatively low. The load balancing process is as follows:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"After the Master process is started, the load balancing thread balancerChore is started. BalancerChore periodically checks the currently registered consumer groups and performs load balancing. In simple terms, the process is to evenly distribute the partitions subscribed by the consumer group to the registered clients, and regularly check whether the current number of partitions of the client exceeds the predetermined number. If it exceeds, the excess partitions are split to other clients with a smaller number.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"The Master checks whether the current consumer group needs to be load balanced. If necessary, all partitions of the Topic set subscribed by the consumer group and all consumer IDs of this consumer group are sorted, and then the number of partitions and the number of clients of the consumer group are divided and modulo to obtain the maximum number of partitions subscribed by each client; then partitions are allocated to each client, and the partition information is carried in the heartbeat response when the consumer subscribes; if the client currently has more partitions, a partition release instruction is given to the client to release the partition from the consumer, and a partition allocation instruction is given to the allocated consumer to inform the partition that the corresponding client is allocated. The specific instructions are as follows:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"message EventProto{\n    optional int64 rebalanceId = 1;\n    optional int32 opType = 2;\n    optional int32 status = 3;\n    /* consumerId@group-brokerId:host:port-topic:partitionId */\n    repeated string subscribeInfo = 4;\n}\n")),(0,a.yg)("p",{parentName:"li"}," Among them:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"rebalanceId: self-incrementing long value ID, indicating the round of load balancing;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"subscribeInfo: indicates the assigned partition information;")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"opType: operation code, the value is defined in EventType, and the currently implemented operation codes only have the following 4 parts: release connection, establish connection; only","_","xxx is not expanded at present. After receiving the load balancing information carried in the heartbeat, the Consumer performs corresponding business operations according to this value;"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'switch (event.getType()) {\n       case DISCONNECT:\n       case ONLY_DISCONNECT:\n           disconnectFromBroker(event);\n           rebalanceResults.put(event);\n           break;\n       case CONNECT:\n       case ONLY_CONNECT:\n           connect2Broker(event);\n           rebalanceResults.put(event);\n           break;\n       case REPORT:\n           reportSubscribeInfo();\n           break;\n       case STOPREBALANCE:\n           break;\n       default:\n           throw new TubeClientException(strBuffer\n                   .append("Invalid rebalance opCode:")\n                   .append(event.getType()).toString());\n}\n'))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"status: indicates the status of the event, defined in ",(0,a.yg)("inlineCode",{parentName:"p"},"EventStatus"),":"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'public enum EventStatus {\n    /**\n     * To be processed state.\n     * */\n    TODO(0, "To be processed"),\n    /**\n     * On processing state.\n     * */\n    PROCESSING(1, "Being processed"),\n    /**\n     * Processed state.\n     * */\n    DONE(2, "Process Done"),\n\n    /**\n     * Unknown state.\n     * */\n    UNKNOWN(-1, "Unknown event status"),\n    /**\n     * Failed state.\n     * */\n    FAILED(-2, "Process failed");\n}\n'))))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"When the Master constructs the load balancing processing task, it sets the instruction status to TODO; when the client heartbeat request comes, the Master writes the task into the response message and sets the instruction status to PROCESSING; the client receives the load balancing instruction from the heartbeat response, performs the actual connection or disconnection operation, and after the operation is completed, sets the instruction status to DONE, and waits for the next heartbeat request to be sent back to the Master;")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Consumer operation: After the Consumer receives the metadata information returned by the Master, it establishes and releases the connection, see the opType annotation above, and after the connection is established, returns the event processing result to the Master, thereby completing the related operations of receiving tasks, executing tasks, and returning task processing results; it should be noted that load balancing registration is a best-effort operation. If the consumer initiates a connection operation, but the consumer that previously occupied the partition has not had time to exit, it will receive ",(0,a.yg)("inlineCode",{parentName:"p"},"PARTITION_OCCUPIED")," The partition is deleted from the attempt queue at this time; the previous partition consumer will still perform the deletion operation after receiving the corresponding response, so that the consumer assigned to this partition in the next round of load balancing is successfully registered on the partition."))),(0,a.yg)("p",null,"At this point, the consumption balancing operation on the consumer side is completed, and the consumer registers and consumes data after obtaining the partition information."))}u.isMDXComponent=!0},92877:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/tubemq_frame-ee9e2f92e2ccf3edd68a79dc4693da0b.png"},91859:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/tubemq_rpc-b4d088efd4c56dc98848e886730b4dd7.png"},184:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/tubemq_rpc_consumer-52cb707ba1d01b002dfaaf611138b231.png"},3558:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/tubemq_rpc_producer-8fbd10d3c691b6a79eb67f5ec5c0b799.png"}}]);