"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[49819],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=i,g=p["".concat(l,".").concat(u)]||p[u]||m[u]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26898:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(58168),i=(t(96540),t(15680));const r={title:"Dashboard Plugin Extension",sidebar_position:1},o=void 0,s={unversionedId:"development/extension_dashboard/how_to_write_plugin_dashboard",id:"version-2.2.0/development/extension_dashboard/how_to_write_plugin_dashboard",title:"Dashboard Plugin Extension",description:"Overview",source:"@site/versioned_docs/version-2.2.0/development/extension_dashboard/how_to_write_plugin_dashboard.md",sourceDirName:"development/extension_dashboard",slug:"/development/extension_dashboard/how_to_write_plugin_dashboard",permalink:"/docs/development/extension_dashboard/how_to_write_plugin_dashboard",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/versioned_docs/version-2.2.0/development/extension_dashboard/how_to_write_plugin_dashboard.md",tags:[],version:"2.2.0",sidebarPosition:1,frontMatter:{title:"Dashboard Plugin Extension",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Transform UDF extension",permalink:"/docs/development/extension_transform/transform_udf"},next:{title:"REST API",permalink:"/docs/development/api"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic",id:"basic",level:2},{value:"Design Summary",id:"design-summary",level:3},{value:"Directory Structure",id:"directory-structure",level:3},{value:"Data Class",id:"data-class",level:3},{value:"View Class",id:"view-class",level:3},{value:"Example",id:"example",level:3},{value:"Extend ExtractNode",id:"extend-extractnode",level:2},{value:"Extend LoadNode",id:"extend-loadnode",level:2}],c={toc:d},p="wrapper";function m(e){let{components:n,...r}=e;return(0,i.yg)(p,(0,a.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,"This article is aimed at InLong Dashboard plug-in developers, trying to describe the process of developing a Dashboard plug-in as comprehensively as possible, helping developers quickly add a data storage LoadNode, and making plug-in development easier.\nThe InLong Dashboard itself acts as a front-end console, built with the React framework."),(0,i.yg)("h2",{id:"basic"},"Basic"),(0,i.yg)("h3",{id:"design-summary"},"Design Summary"),(0,i.yg)("p",null,"This is a schematic diagram of the design of the InLong Dashboard plugin. We treat the plugin as a separate level, and each page uses different plugins for consumption. Data and View are abstract classes provided by the system, and plugins are derived classes one by one."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Dashboard_Plugin",src:t(2773).A,width:"754",height:"462"})),(0,i.yg)("h3",{id:"directory-structure"},"Directory Structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sh"},"|\n|- defaults: default public plugins provided by the InLong community\n|- extends: The extension plug-in during privatization deployment, as an internal plug-in, will not be released to the community\n|- common: the common design of the plugin, e.g. the design of `BasicInfo`\n")),(0,i.yg)("h3",{id:"data-class"},"Data Class"),(0,i.yg)("p",null,"We provide two basic data classes, and each plugin can only implement one of them to implement the data model. At the same time, in the basic data class, a ",(0,i.yg)("inlineCode",{parentName:"p"},"@I18n")," is provided, which can be used to describe the field."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"DataStatic static data class"),(0,i.yg)("li",{parentName:"ul"},"DataWithBackend communicates with the backend data class")),(0,i.yg)("h3",{id:"view-class"},"View Class"),(0,i.yg)("p",null,"On the view, we provide two basic view classes, each plugin can implement one or more of them to implement the view model."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"RenderRow, in which ",(0,i.yg)("inlineCode",{parentName:"li"},"@FieldDecorator")," is provided to describe the row data view"),(0,i.yg)("li",{parentName:"ul"},"RenderList, in which ",(0,i.yg)("inlineCode",{parentName:"li"},"@ColumnDecorator")," is provided to describe the column data view")),(0,i.yg)("h3",{id:"example"},"Example"),(0,i.yg)("p",null,"Below is a basic example, in the plugin, a class that communicates with backend is implemented, containing 3 fields (username, password, format). Among them, ",(0,i.yg)("inlineCode",{parentName:"p"},"BasicInfo")," comes from their different base type classes."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"import { DataWithBackend } from '@/metas/DataWithBackend';\nimport { RenderRow } from '@/metas/RenderRow';\nimport { RenderList } from '@/metas/RenderList';\nimport { BasicInfo } from '../common/BasicInfo';\n\nconst { I18n } = DataWithBackend;\nconst { FieldDecorator } = RenderRow;\nconst { ColumnDecorator } = RenderList;\n\nexport default class Example extends BasicInfo implements DataWithBackend, RenderRow, RenderList {\n  @FieldDecorator({\n    type: 'input',\n    rules: [{ required: true }],\n  })\n  @I18n('meta.Sinks.Username')\n  username: string;\n\n  @FieldDecorator({\n    type: 'password',\n    rules: [{ required: true }],\n  })\n  @I18n('meta.Sinks.Password')\n  password: string;\n\n  @FieldDecorator({\n    type: 'radio',\n    initialValue: 'TextFile',\n    rules: [{ required: true }],\n    props: {\n      options: [\n        {\n          label: 'TextFile',\n          value: 'TextFile',\n        },\n        {\n          label: 'SequenceFile',\n          value: 'SequenceFile',\n        },\n      ],\n    },\n  })\n  @I18n('meta.Sinks.Example.Format')\n  format: string;\n}\n")),(0,i.yg)("h2",{id:"extend-extractnode"},"Extend ExtractNode"),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"inlong-dashboard/src/metas/sources/defaults")," directory, create a new ",(0,i.yg)("inlineCode",{parentName:"p"},"Example.ts")," file as a new plugin, and export it in the ",(0,i.yg)("inlineCode",{parentName:"p"},"index.ts")," file in the current directory (refer to Existing writing method), which completes a new ExtractNode named ",(0,i.yg)("inlineCode",{parentName:"p"},"Example"),"."),(0,i.yg)("h2",{id:"extend-loadnode"},"Extend LoadNode"),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"inlong-dashboard/src/metas/sinks/defaults")," directory, create a new ",(0,i.yg)("inlineCode",{parentName:"p"},"Example.ts")," file as a new plugin, and export it in the ",(0,i.yg)("inlineCode",{parentName:"p"},"index.ts")," file in the current directory (refer to The existing writing method), which completes a new LoadNode named ",(0,i.yg)("inlineCode",{parentName:"p"},"Example"),"."))}m.isMDXComponent=!0},2773:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/dashboard_plugin-d1937ae225705973c130bc310fd47705.png"}}]);