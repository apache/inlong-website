"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[15461],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>y});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var g=o.createContext({}),p=function(e){var n=o.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return o.createElement(g.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,g=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,y=c["".concat(g,".").concat(m)]||c[m]||d[m]||r;return t?o.createElement(y,i(i({ref:n},s),{},{components:t})):o.createElement(y,i({ref:n},s))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},24236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(58168),a=(t(96540),t(15680));const r={title:"OpenTelemetry Log Report",sidebar_position:6},i=void 0,l={unversionedId:"modules/sort/log_report",id:"modules/sort/log_report",title:"OpenTelemetry Log Report",description:"Overview",source:"@site/docs/modules/sort/log_report.md",sourceDirName:"modules/sort",slug:"/modules/sort/log_report",permalink:"/docs/next/modules/sort/log_report",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/docs/modules/sort/log_report.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"OpenTelemetry Log Report",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Dirty Data Archive",permalink:"/docs/next/modules/sort/dirty_data_archive"},next:{title:"Overview",permalink:"/docs/next/modules/manager/overview"}},g={},p=[{value:"Overview",id:"overview",level:2},{value:"Integrating Log Reporting for Connector",id:"integrating-log-reporting-for-connector",level:2},{value:"Docker Configuration",id:"docker-configuration",level:2},{value:"Usage",id:"usage",level:2}],s={toc:p},c="wrapper";function d(e){let{components:n,...r}=e;return(0,a.yg)(c,(0,o.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"As ",(0,a.yg)("inlineCode",{parentName:"p"},"InLong Sort")," runs on different ",(0,a.yg)("inlineCode",{parentName:"p"},"Task Manager")," nodes of ",(0,a.yg)("inlineCode",{parentName:"p"},"Apache Flink"),", each node stores the logs independently, and it is inefficient to view the logs on each node. To solve this, a centralized log management solution based on ",(0,a.yg)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," is provided, which allows users to efficiently manage Flink logs."),(0,a.yg)("p",null,"InLong Sort can integrate the log reporting function into every ",(0,a.yg)("inlineCode",{parentName:"p"},"Connector"),". The log processing flow is shown in the figure below. The logs are reported through ",(0,a.yg)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry"),", collected and processed by ",(0,a.yg)("a",{parentName:"p",href:"https://opentelemetry.io/docs/collector/"},"OpenTelemetry Collector"),", and then sent to ",(0,a.yg)("a",{parentName:"p",href:"https://grafana.com/oss/loki/"},"Grafana Loki")," for centralized management."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"log process",src:t(16010).A,width:"2434",height:"286"})),(0,a.yg)("h2",{id:"integrating-log-reporting-for-connector"},"Integrating Log Reporting for Connector"),(0,a.yg)("p",null,"InLong Sort wraps the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/inlong/blob/6e78dd2de8e917b9fc17a18d5e990b43089bb804/inlong-sort/sort-flink/base/src/main/java/org/apache/inlong/sort/base/util/OpenTelemetryLogger.java"},"OpenTelemetryLogger")," class, which provides a ",(0,a.yg)("inlineCode",{parentName:"p"},"Builder")," to help users to quickly configure an ",(0,a.yg)("inlineCode",{parentName:"p"}," OpenTelemetryLogger")," and can enable or disable logging reporting by calling its ",(0,a.yg)("inlineCode",{parentName:"p"},"install")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"uninstall")," functions. With the help of ",(0,a.yg)("inlineCode",{parentName:"p"},"OpenTelemetryLogger"),", the connector can report logs more easily. The following steps describe how to use the OpenTelemetryLogger class to integrate log reporting for connector based on",(0,a.yg)("a",{parentName:"p",href:"https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface#FLIP27:RefactorSourceInterface-Motivation"},"FLIP-27")," standard:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Construct an ",(0,a.yg)("inlineCode",{parentName:"li"},"OpenTelemetryLogger")," object using ",(0,a.yg)("inlineCode",{parentName:"li"},"OpenTelemetryLogger.Builder()")," in the constructor method of connector ",(0,a.yg)("inlineCode",{parentName:"li"},"SourceReader"),"'s class."),(0,a.yg)("li",{parentName:"ol"},"Call ",(0,a.yg)("inlineCode",{parentName:"li"},"install()")," method of the ",(0,a.yg)("inlineCode",{parentName:"li"},"OpenTelemetryLogger")," object in ",(0,a.yg)("inlineCode",{parentName:"li"},"Start()")," function of ",(0,a.yg)("inlineCode",{parentName:"li"},"SourceReader"),"."),(0,a.yg)("li",{parentName:"ol"},"Call ",(0,a.yg)("inlineCode",{parentName:"li"},"uninstall()")," method of the ",(0,a.yg)("inlineCode",{parentName:"li"},"OpenTelemetryLogger")," object in ",(0,a.yg)("inlineCode",{parentName:"li"},"close()")," function of ",(0,a.yg)("inlineCode",{parentName:"li"},"SourceReader"),".")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Note"),": If the ",(0,a.yg)("inlineCode",{parentName:"p"},"maven-shade-plugin")," plugin is used, the ",(0,a.yg)("inlineCode",{parentName:"p"},"opentelemetry")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"okhttp")," related packages need to be included:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"<build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>${plugin.shade.version}</version>\n                <executions>\n                    <execution>\n                        <id>shade-flink</id>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <phase>package</phase>\n                        <configuration>\n                            <createDependencyReducedPom>false</createDependencyReducedPom>\n                            <artifactSet>\n                                <includes>\n                                    <include>io.opentelemetry*</include>\n                                    <include>com.squareup.*</include>\n                                </includes>\n                            </artifactSet>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n")),(0,a.yg)("p",null,"The example is:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"import org.apache.inlong.sort.base.util.OpenTelemetryLogger;\n\npublic class XXXSourceReader<T>\n{\n\n    private static final Logger LOG = LoggerFactory.getLogger(XXXSourceReader.class);\n\n    private final OpenTelemetryLogger openTelemetryLogger;\n\n    public XXXSourceReader() {\n        ...\n        // initial OpenTelemetryLogger\n        this.openTelemetryLogger = new OpenTelemetryLogger.Builder()\n                .setServiceName(this.getClass().getSimpleName())\n                .setLocalHostIp(this.context.getLocalHostName()).build();\n    }\n\n    @Override\n    public void start() {\n        openTelemetryLogger.install(); //  start log reporting\n        ...\n    }\n\n    @Override\n    public void close() throws Exception {\n        super.close();\n        openTelemetryLogger.uninstall(); // close log reporting\n    }\n    \n    ...\n}\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"OpenTelemetryLogger")," currently provides the following configuration items:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Configuration"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Default value"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"endpoint")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"OpenTelemetry Collector")," address, if not specified,it will try to get from ",(0,a.yg)("inlineCode",{parentName:"td"},"OTEL_EXPORTER_ENDPOINT")," environment variable; if the environment variable is not configured, then use the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"localhost:4317"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"serviceName")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"}," OpenTelemetry"),"'s service name, which can be used to distinguish between different connectors."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"unnamed_service  "))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"layout")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Log4j2"),"'s log format, which is an instance of ",(0,a.yg)("inlineCode",{parentName:"td"},"PatternLayout")," class"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"logLevel")),(0,a.yg)("td",{parentName:"tr",align:null},"Log level"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Level.INFO"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"localHostIp")),(0,a.yg)("td",{parentName:"tr",align:null},"IP of the ",(0,a.yg)("inlineCode",{parentName:"td"},"Flink")," node, available in ",(0,a.yg)("inlineCode",{parentName:"td"},"SourceReader")," via ",(0,a.yg)("inlineCode",{parentName:"td"},"this.context.getLocalHostName()"),"."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"null"))))),(0,a.yg)("h2",{id:"docker-configuration"},"Docker Configuration"),(0,a.yg)("p",null,"In addition to integrating the log reporting function for  Connector, you also need to add three docker containers(",(0,a.yg)("inlineCode",{parentName:"p"},"opentelemetry-collector"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"grafana loki"),",  ",(0,a.yg)("inlineCode",{parentName:"p"},"grafana"),"), and configure the ",(0,a.yg)("inlineCode",{parentName:"p"},"OTEL_EXPORTER_ENDPOINT")," environment variable for the ",(0,a.yg)("inlineCode",{parentName:"p"},"Flink")," container."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"This part of the configuration is already provided in ",(0,a.yg)("inlineCode",{parentName:"p"},"-inlong-docker-docker-compose-docker-compose.yml"),". Just add the ",(0,a.yg)("inlineCode",{parentName:"p"},"--profile sort-report")," option when starting ",(0,a.yg)("inlineCode",{parentName:"p"},"docker compose")," to enable it. The full command is ",(0,a.yg)("inlineCode",{parentName:"p"},"docker compose --profile sort-report up -d"))),(0,a.yg)("p",null,"You can also refer to the following content to configure your own application\uff0c the ",(0,a.yg)("inlineCode",{parentName:"p"},"docker-compose.yml")," file is shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yml"},'# flink jobmanager\njobmanager:\n  image: apache/flink:1.15-scala_2.12\n  container_name: jobmanager\n  environment:\n    - |\n      FLINK_PROPERTIES=\n      jobmanager.rpc.address: jobmanager\n    - OTEL_EXPORTER_ENDPOINT=logcollector:4317\n  ports:\n    - "8081:8081"\n  command: jobmanager\n\n# flink taskmanager\ntaskmanager:\n  image: apache/flink:1.15-scala_2.12\n  container_name: taskmanager\n  environment:\n    - |\n      FLINK_PROPERTIES=\n      jobmanager.rpc.address: jobmanager\n      taskmanager.numberOfTaskSlots: 2\n    - OTEL_EXPORTER_ENDPOINT=logcollector:4317\n  command: taskmanager\n\n# opentelemetry collector\nlogcollector:\n  image: otel/opentelemetry-collector-contrib:0.110.0\n  container_name: logcollector\n  volumes:\n    - ./log-system/otel-config.yaml:/otel-config.yaml\n  command: [ "--config=/otel-config.yaml"]\n  ports:\n    - "4317:4317"\n\n# grafana loki\nloki:\n  image: grafana/loki:3.0.0\n  ports:\n    - "3100:3100"\n  volumes:\n    - ./log-system/loki.yaml:/etc/loki/local-config.yaml\n  command: -config.file=/etc/loki/local-config.yaml\n\n# grafana\ngrafana:\n  environment:\n    - GF_PATHS_PROVISIONING=/etc/grafana/provisioning\n    - GF_AUTH_ANONYMOUS_ENABLED=true\n    - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin\n  entrypoint:\n    - sh\n    - -euc\n    - |\n      mkdir -p /etc/grafana/provisioning/datasources\n      cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml\n      apiVersion: 1\n      datasources:\n      - name: Loki\n        type: loki\n        access: proxy \n        orgId: 1\n        url: http://loki:3100\n        basicAuth: false\n        isDefault: true\n        version: 1\n        editable: false\n      EOF\n      /run.sh\n  image: grafana/grafana:latest\n  ports:\n    - "3000:3000"\n')),(0,a.yg)("p",null,"You also need to provide configuration files (",(0,a.yg)("inlineCode",{parentName:"p"},"otel-config.yaml")," for logcollector and ",(0,a.yg)("inlineCode",{parentName:"p"},"loki.yaml")," for Loki). The content of the otel-config.yaml file is:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: logcollector:4317\nprocessors:\n  batch:\n\nexporters:\n  logging:\n    verbosity: detailed\n  otlphttp:\n    endpoint: http://loki:3100/otlp\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlphttp, logging]\n")),(0,a.yg)("p",null,"And the content of the ",(0,a.yg)("inlineCode",{parentName:"p"},"loki.yaml")," file is:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"auth_enabled: false\n\nlimits_config:\n  allow_structured_metadata: true\n  volume_enabled: true\n  otlp_config:\n    resource_attributes:\n      attributes_config:\n        - action: index_label\n          attributes:\n            - level\nserver:\n  http_listen_port: 3100\n\ncommon:\n  ring:\n    instance_addr: 0.0.0.0\n    kvstore:\n      store: inmemory\n  replication_factor: 1\n  path_prefix: /tmp/loki\n\nschema_config:\n  configs:\n    - from: 2020-05-15\n      store: tsdb\n      object_store: filesystem\n      schema: v13\n      index:\n        prefix: index_\n        period: 24h\n\nstorage_config:\n  tsdb_shipper:\n    active_index_directory: /tmp/loki/index\n    cache_location: /tmp/loki/index_cache\n  filesystem:\n    directory: /tmp/loki/chunks\n\npattern_ingester:\n  enabled: true\n")),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("p",null,"Execute ",(0,a.yg)("inlineCode",{parentName:"p"},"docker compose --profile sort-report up -d")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"inlong/docker/")," path to start the relevant containers, then create and start a task process according to ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/quick_start/data_ingestion/file_pulsar_clickhouse_example"},"Data Ingestion")," (the involved connectors need to be integrated with OpenTelemetryAppender)."),(0,a.yg)("p",null,"After that you can enter the ",(0,a.yg)("inlineCode",{parentName:"p"},"Grafana Loki")," system by ",(0,a.yg)("inlineCode",{parentName:"p"},"http://127.0.0.1:3000/explore"),", and query the logs by the ",(0,a.yg)("inlineCode",{parentName:"p"},"service_name")," field:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Loki_1",src:t(54355).A,width:"3787",height:"1952"})),(0,a.yg)("p",null,"Click on the log item to view the log details (",(0,a.yg)("strong",{parentName:"p"},"Note:")," The default log reporting level is ",(0,a.yg)("inlineCode",{parentName:"p"},"ERROR"),".):"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Loki_2",src:t(79864).A,width:"3074",height:"1139"})))}d.isMDXComponent=!0},16010:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/LogProcess-869bdc4f5f6417e24e2f1163faa6b9f4.png"},54355:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/loki1-3ffb784523411bc5013186da7187d119.png"},79864:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/loki2-8f29b20948ce5a194ad920eb8444fc15.png"}}]);